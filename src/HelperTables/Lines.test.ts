import { Test, TestFunc, TestRun } from "./TestRunner";
import { un_commented_line_iter, Line } from './Lines'
let cpp_lines: Test[][] = [
    [
        { input: 'hello "/* thehre */" baby /* jjj // ', output: 26 },
        { input: ' hlhflh /* jfjf /* // */ hello /* hhahah get fucked */', output: 7 }
    ],

    [{ input: 'void GraphGenerationSTVisitor::VisitStructure(Structure* s) {', output: 61 }],
    [{ input: 'hello /* thehre */ baby /* jjj // ', output: 12 }],
    [{ input: 'hello /* thehre */ baby /* jjj // */', output: 12 }],
    [{ input: 'hello /* thehre */ baby /* jjj // */ hahahha', output: 20 }],
    [{ input: 'hello /* thehre */ baby  jjj // ', output: 17 }],
    [{ input: 'hello /* thehre */ baby //   jjj  ', output: 12 }],
    [{ input: 'hello //  /* thehre */ baby //   jjj  ', output: 6 }],
    [{ input: 'hello /*  // thehre */ baby // jjj  ', output: 12 }],
    [{ input: 'hello // /*  // thehre */ baby // jjj  ', output: 6 }],


    [
        { input: 'int main() {', output: 12 },
        { input: '    // Single-line comment', output: 4 },
        { input: '    return 0;', output: 13 },
        { input: '}', output: 1 },
    ],
    [
        { input: '/* This is a', output: 0 },
        { input: '   multi-line comment */', output: 0 },
        { input: 'int x = 5;', output: 10 },
        { input: '/* Multi-line comment', output: 0 },
        { input: 'continued on the next line */', output: 0 },
    ],
    [
        { input: 'int x = 5;', output: 10 },
        { input: '/*', output: 0 },
        { input: 'int y = 10;', output: 0 },
        { input: '*/', output: 0 },
        { input: 'int z = 15;', output: 11 },
    ],
    [
        { input: 'int x = 5;', output: 10 },
        { input: '// Comment inside /*', output: 0 },
        { input: 'int y = 10;', output: 11 },
        { input: 'int z = 15;', output: 11 },
    ],
    [
        { input: 'int a = 5;', output: 10 },
        { input: '/* Multi-line', output: 0 },
        { input: 'comment', output: 0 },
        { input: 'in the middle */', output: 0 },
        { input: 'int b = 10;', output: 11 },
    ],
    [
        { input: 'int a = 5;', output: 10 },
        { input: '/* Nested /* comment */', output: 0 },
        { input: 'int b = 10;', output: 11 },
    ],
    [
        { input: 'int a = 5;', output: 10 },
        { input: '/* Nested // comment */', output: 0 },
        { input: 'int b = 10;', output: 11 },
    ],
    [
        { input: 'int x = 5;', output: 10 },
        { input: '/* Multi-line comment', output: 0 },
        { input: 'continued on the next line', output: 0 },
        { input: 'with nested /* comment */', output: 0 },
        { input: 'int y = 10;', output: 11 },
    ],
    [{ input: '/* Comment starting in the middle', output: 0 },
    { input: 'of a line */', output: 0 },
    { input: 'int x = 5;', output: 10 },
    { input: '/* Comment', output: 0 },
    { input: 'continued', output: 0 },
    { input: 'on multiple lines */', output: 0 },
    { input: 'int y = 10;', output: 11 }],


    [
        { input: `#include "GraphGeneration.h"`, output: 28 },
        { input: `#include <cassert>`, output: 18 },
        { input: ``, output: 0 },
        { input: `using namespace dependenciesMining;`, output: 35 },
        { input: `using namespace graph;`, output: 22 },
        { input: `using namespace graphGeneration;`, output: 32 },
        { input: ``, output: 0 },
        { input: `// FIXME Dependencies cardinalities`, output: 0 },
        { input: ``, output: 0 },
        { input: `// GraphGenerationSTVisitor`, output: 0 },
        { input: ``, output: 0 },
        { input: `void GraphGenerationSTVisitor::VisitStructure(Structure* s) {`, output: 61 },
        { input: `	assert(s);`, output: 11 },
        { input: ``, output: 0 },
        { input: `	if (s->IsUndefined())`, output: 22 },
        { input: `		return;`, output: 9 },
        { input: ``, output: 0 },
        { input: `	if (graph.GetNode(s->GetID())) {`, output: 33 },
        { input: `		if (currNode && currNode->GetID() != s->GetID()) {			// Ignore the self dependencies `, output: 55 },
        { input: `			assert(currDepType != Undefined_dep_t);`, output: 42 },
        { input: `			currNode->AddEdge(graph.GetNode(s->GetID()), currDepType);`, output: 61 },
        { input: `		}`, output: 3 },
        { input: `		return;`, output: 9 },
        { input: `	}`, output: 2 },
        { input: ``, output: 0 },
        { input: `	Node* oldCurrNode = currNode;`, output: 30 },
        { input: `	Edge::DependencyType oldCurrDepType = currDepType;`, output: 51 },
        { input: `	currNode = new Node();`, output: 23 },
        { input: `	untyped::Object& nodeData = currNode->GetData();`, output: 49 },
        { input: ``, output: 0 },
        { input: `	// Symbol `, output: 1 },
        { input: `	nodeData.Set("id", s->GetID());`, output: 32 },
        { input: `	nodeData.Set("name", s->GetName());`, output: 36 },
        { input: `	nodeData.Set("namespace", s->GetNamespace());`, output: 46 },
        { input: ``, output: 0 },
        { input: `	untyped::Object srcInfo;`, output: 25 },
        { input: `	srcInfo.Set("fileName", s->GetSourceInfo().GetFileName());`, output: 59 },
        { input: `	srcInfo.Set("line", (double)s->GetSourceInfo().GetLine());`, output: 59 },
        { input: `	srcInfo.Set("column", (double)s->GetSourceInfo().GetColumn());`, output: 63 },
        { input: `	nodeData.Set("srcInfo", srcInfo);`, output: 34 },
        { input: ``, output: 0 },
        { input: `	nodeData.Set("classType", s->GetClassTypeAsString());`, output: 54 },
        { input: ``, output: 0 },
        { input: `	graph.AddNode(currNode);`, output: 25 },
        { input: ``, output: 0 },
        { input: `	// Structure`, output: 1 },
        { input: `	nodeData.Set("structureType", s->GetStructureTypeAsString());`, output: 62 },
        { input: ``, output: 0 },
        { input: `	if (s->GetTemplateParent()) {`, output: 30 },
        { input: `		auto* templateParent = s->GetTemplateParent();`, output: 48 },
        { input: `		if (!templateParent->IsUndefined()) {`, output: 39 },
        { input: `			currDepType = ClassTemplateParent_dep_t;`, output: 43 },
        { input: `			VisitStructure(static_cast<Structure*>(templateParent));`, output: 59 },
        { input: `			nodeData.Set("templateParent", templateParent->GetID());`, output: 59 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: ``, output: 0 },
        { input: `	if (s->GetNestedParent()) {`, output: 28 },
        { input: `		auto* nestedParent = s->GetNestedParent();`, output: 44 },
        { input: `		if (!nestedParent->IsUndefined()) {`, output: 37 },
        { input: `			currDepType = NestedClass_dep_t;`, output: 35 },
        { input: `			VisitStructure(static_cast<Structure*>(nestedParent));`, output: 57 },
        { input: `			nodeData.Set("nestedParent", nestedParent->GetID());`, output: 55 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: ``, output: 0 },
        { input: `	untyped::Object basesObj;`, output: 26 },
        { input: `	currDepType = Inherit_dep_t;`, output: 29 },
        { input: `	double index = 0;`, output: 18 },
        { input: `	for (auto& it : s->GetBases()) {`, output: 33 },
        { input: `		auto* base = it.second;`, output: 25 },
        { input: `		if (!((Structure*)base)->IsUndefined()) {`, output: 43 },
        { input: `			VisitStructure(static_cast<Structure*>(base));`, output: 49 },
        { input: `			basesObj.Set(index++, base->GetID());`, output: 40 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	nodeData.Set("bases", basesObj);`, output: 33 },
        { input: ``, output: 0 },
        { input: `	untyped::Object friendsObj;`, output: 28 },
        { input: `	index = 0;`, output: 11 },
        { input: `	currDepType = Friend_dep_t;`, output: 28 },
        { input: `	for (auto& it : s->GetFriends()) {`, output: 35 },
        { input: `		auto* friend_ = it.second;`, output: 28 },
        { input: `		if (!((Structure*)friend_)->IsUndefined()) {`, output: 46 },
        { input: `			VisitStructure(static_cast<Structure*>(friend_));`, output: 52 },
        { input: `			friendsObj.Set(index++, friend_->GetID());`, output: 45 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	nodeData.Set("friends", friendsObj);`, output: 37 },
        { input: ``, output: 0 },
        { input: `	untyped::Object templArgsObj;`, output: 30 },
        { input: `	index = 0;`, output: 11 },
        { input: `	currDepType = ClassTemplateArg_dep_t;`, output: 38 },
        { input: `	for (auto& it : s->GetTemplateArguments()) {`, output: 45 },
        { input: `		auto* templArg = it.second;`, output: 29 },
        { input: `		if (!((Structure*)templArg)->IsUndefined()) {`, output: 47 },
        { input: `			VisitStructure(static_cast<Structure*>(templArg));`, output: 53 },
        { input: `			templArgsObj.Set(index++, templArg->GetID());`, output: 48 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	nodeData.Set("templateArguments", templArgsObj);`, output: 49 },
        { input: ``, output: 0 },
        { input: `	untyped::Object fieldsObj;`, output: 27 },
        { input: `	currDepType = ClassField_dep_t;`, output: 32 },
        { input: `	for (auto& it : s->GetFields()) {`, output: 34 },
        { input: `		auto* field = it.second;`, output: 26 },
        { input: `		if (((Definition*)field)->isStructure()) {`, output: 44 },
        { input: `			if (!((Definition*)field)->GetType()->IsUndefined()) {`, output: 57 },
        { input: `				VisitDefinition(static_cast<Definition*>(field));`, output: 53 },
        { input: `				fieldsObj.Set(it.first, innerObj);`, output: 38 },
        { input: `			}`, output: 4 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	nodeData.Set("fields", fieldsObj);`, output: 35 },
        { input: ``, output: 0 },
        { input: `	untyped::Object methodsObj;`, output: 28 },
        { input: `	for (auto& it : s->GetMethods()) {`, output: 35 },
        { input: `		auto* method = it.second;`, output: 27 },
        { input: `		if (((Method*)method)->IsTrivial())						// Ignore the Trivial methods that compiler creates automatically`, output: 43 },
        { input: `			continue;`, output: 12 },
        { input: `		VisitMethod(static_cast<Method*>(method));`, output: 44 },
        { input: `		methodsObj.Set(it.first, innerObj);`, output: 37 },
        { input: `	}`, output: 2 },
        { input: `	nodeData.Set("methods", methodsObj);`, output: 37 },
        { input: ``, output: 0 },
        { input: `	if (oldCurrNode) {`, output: 19 },
        { input: `		assert(oldCurrDepType != Undefined_dep_t);`, output: 44 },
        { input: `		oldCurrNode->AddEdge(currNode, oldCurrDepType);`, output: 49 },
        { input: `	}`, output: 2 },
        { input: ``, output: 0 },
        { input: `	currNode = oldCurrNode;`, output: 24 },
        { input: `	currDepType = oldCurrDepType;`, output: 30 },
        { input: `}`, output: 1 },
        { input: ``, output: 0 },
        { input: ``, output: 0 },
        { input: `void GraphGenerationSTVisitor::VisitMethod(Method* s) {`, output: 55 },
        { input: `	assert(s);`, output: 11 },
        { input: ``, output: 0 },
        { input: `	Edge::DependencyType oldCurrDepType = currDepType;`, output: 51 },
        { input: `	untyped::Object data;`, output: 22 },
        { input: ``, output: 0 },
        { input: `	// Symbol `, output: 1 },
        { input: `	data.Set("id", s->GetID());`, output: 28 },
        { input: `	data.Set("name", s->GetName());`, output: 32 },
        { input: `	data.Set("namespace", s->GetNamespace());`, output: 42 },
        { input: ``, output: 0 },
        { input: `	untyped::Object srcInfo;`, output: 25 },
        { input: `	srcInfo.Set("fileName", s->GetSourceInfo().GetFileName());`, output: 59 },
        { input: `	srcInfo.Set("line", (double)s->GetSourceInfo().GetLine());`, output: 59 },
        { input: `	srcInfo.Set("column", (double)s->GetSourceInfo().GetColumn());`, output: 63 },
        { input: `	data.Set("srcInfo", srcInfo);`, output: 30 },
        { input: `	data.Set("classType", s->GetClassTypeAsString());`, output: 50 },
        { input: ``, output: 0 },
        { input: `	// Method`, output: 1 },
        { input: `	data.Set("methodType", s->GetMethodTypeAsString());`, output: 52 },
        { input: ``, output: 0 },
        { input: `	if (s->GetReturnType()) {`, output: 26 },
        { input: `		auto* returnType = s->GetReturnType();`, output: 40 },
        { input: `		if (!returnType->IsUndefined()) {`, output: 35 },
        { input: `			currDepType = MethodReturn_dep_t;`, output: 36 },
        { input: `			VisitStructure(static_cast<Structure*>(returnType));`, output: 55 },
        { input: `			data.Set("returnType", returnType->GetID());`, output: 47 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: ``, output: 0 },
        { input: `	untyped::Object argsObj;`, output: 25 },
        { input: `	currDepType = MethodArg_dep_t;`, output: 31 },
        { input: `	for (auto& it : s->GetArguments()) {`, output: 37 },
        { input: `		auto* arg = it.second;`, output: 24 },
        { input: `		if (((Definition*)arg)->isStructure()) {`, output: 42 },
        { input: `			if (!((Definition*)arg)->GetType()->IsUndefined()) {`, output: 55 },
        { input: `				VisitDefinition(static_cast<Definition*>(arg));`, output: 51 },
        { input: `				argsObj.Set(it.first, innerObj);`, output: 36 },
        { input: `			}`, output: 4 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	data.Set("arguments", argsObj);`, output: 32 },
        { input: ``, output: 0 },
        { input: `	untyped::Object defsObj;`, output: 25 },
        { input: `	currDepType = MethodDefinition_dep_t;`, output: 38 },
        { input: `	for (auto& it : s->GetDefinitions()) {`, output: 39 },
        { input: `		auto* def = it.second;`, output: 24 },
        { input: `		if (((Definition*)def)->isStructure()) {`, output: 42 },
        { input: `			if (!((Definition*)def)->GetType()->IsUndefined()) {`, output: 55 },
        { input: `				VisitDefinition(static_cast<Definition*>(def));`, output: 51 },
        { input: `				defsObj.Set(it.first, innerObj);`, output: 36 },
        { input: `			}`, output: 4 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	data.Set("definitions", defsObj);`, output: 34 },
        { input: ``, output: 0 },
        { input: `	untyped::Object templArgsObj;`, output: 30 },
        { input: `	double index = 0;`, output: 18 },
        { input: `	currDepType = MethodTemplateArg_dep_t;`, output: 39 },
        { input: `	for (auto& it : s->GetTemplateArguments()) {`, output: 45 },
        { input: `		auto* templArg = it.second;`, output: 29 },
        { input: `		if (!((Structure*)templArg)->IsUndefined()) {`, output: 47 },
        { input: `			VisitStructure(static_cast<Structure*>(templArg));`, output: 53 },
        { input: `			templArgsObj.Set(index++, templArg->GetID());`, output: 48 },
        { input: `		}`, output: 3 },
        { input: `	}`, output: 2 },
        { input: `	data.Set("templateArguments", templArgsObj);`, output: 45 },
        { input: ``, output: 0 },
        { input: `	// memberexpr`, output: 1 },
        { input: `	untyped::Object memberExprsObj;`, output: 32 },
        { input: `	currDepType = MemberExpr_dep_t;`, output: 32 },
        { input: `	for (auto it : s->GetMemberExpr()) {`, output: 37 },
        { input: `		auto expr = it.second;`, output: 24 },
        { input: `		untyped::Object memberExprObj;`, output: 32 },
        { input: ``, output: 0 },
        { input: `		if (!expr.GetMembers().size())`, output: 32 },
        { input: `			continue;`, output: 12 },
        { input: ``, output: 0 },
        { input: `		memberExprObj.Set("expr", expr.GetExpr());`, output: 44 },
        { input: `		untyped::Object srcInfo;`, output: 26 },
        { input: `		srcInfo.Set("fileName", expr.GetSourceInfo().GetFileName());`, output: 62 },
        { input: `		srcInfo.Set("line", (double)expr.GetSourceInfo().GetLine());`, output: 62 },
        { input: `		srcInfo.Set("column", (double)expr.GetSourceInfo().GetColumn());`, output: 66 },
        { input: `		memberExprObj.Set("srcInfo", srcInfo);`, output: 40 },
        { input: ``, output: 0 },
        { input: `		untyped::Object membersObj;`, output: 29 },
        { input: `		double index2 = 0;`, output: 20 },
        { input: `		for (auto it2 : expr.GetMembers()) {`, output: 38 },
        { input: `			auto member = it2;`, output: 21 },
        { input: `			auto* memberType = it2.GetType();`, output: 36 },
        { input: `			if (!memberType->IsUndefined()) {`, output: 36 },
        { input: `				untyped::Object memberObj;`, output: 30 },
        { input: ``, output: 0 },
        { input: `				memberObj.Set("name", member.GetName());`, output: 44 },
        { input: `				assert(it2.GetType());`, output: 26 },
        { input: `				memberObj.Set("type", memberType->GetID());`, output: 47 },
        { input: `				memberObj.Set("memberType", member.GetMemberType());`, output: 56 },
        { input: ``, output: 0 },
        { input: `				untyped::Object locEnd;`, output: 27 },
        { input: `				locEnd.Set("fileName", member.GetLocEnd().GetFileName());`, output: 61 },
        { input: `				locEnd.Set("line", (double)member.GetLocEnd().GetLine());`, output: 61 },
        { input: `				locEnd.Set("column", (double)member.GetLocEnd().GetColumn());`, output: 65 },
        { input: `				memberObj.Set("locEnd", locEnd);`, output: 36 },
        { input: ``, output: 0 },
        { input: `				VisitStructure(static_cast<Structure*>(memberType));`, output: 56 },
        { input: `				membersObj.Set(index2++, memberObj);`, output: 40 },
        { input: `			}`, output: 4 },
        { input: `			memberExprObj.Set("members", membersObj);`, output: 44 },
        { input: `		}`, output: 3 },
        { input: ``, output: 0 },
        { input: `		memberExprsObj.Set(it.first, memberExprObj);`, output: 46 },
        { input: `	}`, output: 2 },
        { input: `	data.Set("memberExprs", memberExprsObj);`, output: 41 },
        { input: ``, output: 0 },
        { input: `	innerObj.Clear();`, output: 18 },
        { input: `	innerObj = data;`, output: 17 },
        { input: `	data.Clear();`, output: 14 },
        { input: `	currDepType = oldCurrDepType;`, output: 30 },
        { input: `}`, output: 1 },
        { input: ``, output: 0 },
        { input: ``, output: 0 },
        { input: `void GraphGenerationSTVisitor::VisitDefinition(Definition* s) {`, output: 63 },
        { input: `	assert(s);`, output: 11 },
        { input: ``, output: 0 },
        { input: `	Edge::DependencyType oldCurrDepType = currDepType;`, output: 51 },
        { input: ``, output: 0 },
        { input: `	Structure* typeStruct = (Structure*)s->GetType();`, output: 50 },
        { input: `	assert(typeStruct);`, output: 20 },
        { input: ``, output: 0 },
        { input: `	if (typeStruct->IsUndefined())`, output: 31 },
        { input: `		assert(0);`, output: 12 },
        { input: ``, output: 0 },
        { input: `	VisitStructure(typeStruct);`, output: 28 },
        { input: `	Node* node = graph.GetNode(typeStruct->GetID());`, output: 49 },
        { input: ``, output: 0 },
        { input: `	untyped::Object data;`, output: 22 },
        { input: ``, output: 0 },
        { input: `	// Symbol `, output: 1 },
        { input: `	data.Set("id", s->GetID());`, output: 28 },
        { input: `	data.Set("name", s->GetName());`, output: 32 },
        { input: `	data.Set("namespace", s->GetNamespace());`, output: 42 },
        { input: ``, output: 0 },
        { input: `	untyped::Object srcInfo;`, output: 25 },
        { input: `	srcInfo.Set("fileName", s->GetSourceInfo().GetFileName());`, output: 59 },
        { input: `	srcInfo.Set("line", (double)s->GetSourceInfo().GetLine());`, output: 59 },
        { input: `	srcInfo.Set("column", (double)s->GetSourceInfo().GetColumn());`, output: 63 },
        { input: `	data.Set("srcInfo", srcInfo);`, output: 30 },
        { input: `	data.Set("classType", s->GetClassTypeAsString());`, output: 50 },
        { input: ``, output: 0 },
        { input: `	// Definition`, output: 1 },
        { input: `	data.Set("type", typeStruct->GetID());`, output: 39 },
        { input: ``, output: 0 },
        { input: `	innerObj.Clear();`, output: 18 },
        { input: `	innerObj = data;`, output: 17 },
        { input: `	data.Clear();`, output: 14 },
        { input: `	currDepType = oldCurrDepType;`, output: 30 },
        { input: `}`, output: 1 },
        { input: ``, output: 0 },
        { input: ``, output: 0 },
        { input: `Graph& GraphGenerationSTVisitor::GetGraph() {`, output: 45 },
        { input: `	return graph;`, output: 14 },
        { input: `}`, output: 1 },
        { input: ``, output: 0 },
        { input: ``, output: 0 },
        { input: `Graph graphGeneration::GenerateDependenciesGraph(const SymbolTable& st) {`, output: 73 },
        { input: `	GraphGenerationSTVisitor visitor;`, output: 34 },
        { input: `	st.Accept(&visitor);`, output: 21 },
        { input: `	return visitor.GetGraph();`, output: 27 },
        { input: `}`, output: 1 },
    ],

    [{ input: 'hello " hejj" "//" hahaha /* thehre */ baby "/*" jjj // ', output: 41 }],
    [{ input: 'hello " hejj" "//" hahaha /* thehre */ baby /* jjj // ', output: 32 },
    { input: 'hello */ "*/" " hejj" "//" hahaha /* thehre */ baby "/*" jjj // ', output: 41 }
    ],
]

const line_obj: Line = {
    str: "",
    comment_open: false,
    real_len: 0
};

TestRun(cpp_lines, (line) => {
    line_obj.str = line;
    un_commented_line_iter(line_obj);
    const output = line_obj.real_len;
    line_obj.real_len = 0;
    return output
}, undefined, () => line_obj.comment_open = false)

