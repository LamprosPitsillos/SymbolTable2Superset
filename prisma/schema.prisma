// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Dependency {
    dependency_id   Int    @id @default(autoincrement())
    dependency_from String @db.VarChar(255)
    dependency_to   String

    types   Types @relation(fields: [typesId], references: [id])
    typesId Int @unique
}

model Rule {
    rule_name String  @id @db.VarChar(255)
    rule_min  Int?
    rule_max  Int?
    rule_enum String?  @db.VarChar(255)
    rule_bool Boolean?
}

model Types {
    id                  Int         @id @default(autoincrement())
    ClassField          Int         @default(0)
    ClassTemplateArg    Int         @default(0)
    ClassTemplateParent Int         @default(0)
    Friend              Int         @default(0)
    Inherit             Int         @default(0)
    MemberExpr          Int         @default(0)
    MethodArg           Int         @default(0)
    MethodDefinition    Int         @default(0)
    MethodReturn        Int         @default(0)
    MethodTemplateArgs  Int         @default(0)
    NestedClass         Int         @default(0)
    Dependency          Dependency?
}

model Source {
    source_id Int          @id @default(autoincrement())
    source    String
    line      SourceLine[]
}

model Header {
    header_id Int          @id @default(autoincrement())
    header    String
    line      HeaderLine[]
}

model HeaderLine {
    line_id  Int    @id @default(autoincrement())
    line_num Int
    line_len Int
    header   Header @relation(fields: [headerId], references: [header_id])
    headerId Int
}

model SourceLine {
    line_id  Int    @id @default(autoincrement())
    line_num Int
    line_len Int
    source   Source @relation(fields: [sourceId], references: [source_id])
    sourceId Int
}

model Structure {
    structure_id              Int                 @id @default(autoincrement())
    structure_signature       String              @db.Text
    structure_bases           Bases[]
    structure_contain         Contain[]
    structure_fields          Field[]
    structure_friend          Friend[]
    structure_methods         Method[]
    structure_name            String
    structure_name_convention String?
    structure_namespace       String
    structure_nested_parent   String?
    structure_col             Int
    structure_line            Int
    structure_file            String
    structure_type            String
    structure_template_args   StructTemplateArg[]
    structure_template_parent String?
}

model StructTemplateArg {
    struct_template_arg_id Int    @id @default(autoincrement())
    struct_template_arg    String

    structure Structure @relation(fields: [structId], references: [structure_id])
    structId  Int       @unique
}

model Bases {
    bases_id   Int    @id @default(autoincrement())
    bases_name String

    structure   Structure @relation(fields: [structureId], references: [structure_id])
    structureId Int
}

model Contain {
    contain_id   Int    @id @default(autoincrement())
    contain_name String

    structure   Structure @relation(fields: [structureId], references: [structure_id])
    structureId Int
}

model Field {
    field_id              Int     @id @default(autoincrement())
    field_full_name       String //  "members::A::m"
    field_access          String
    field_type            String? // "type" : "members::A::M"
    field_full_type       String // "full_type" : "class members::A::M",
    field_name            String // "name" : "m",
    field_name_convention String?
    field_col             Int
    field_file            String
    field_line            Int

    structure   Structure @relation(fields: [structureId], references: [structure_id])
    structureId Int
}

model Friend {
    friend_id   Int       @id @default(autoincrement())
    friend_name String
    structure   Structure @relation(fields: [structureId], references: [structure_id])
    structureId Int
}

model Definition {
    definition_id        Int    @id @default(autoincrement())
    definition_full_type String
    definition_name      String

    definition_name_convention String?
    definition_col             Int
    definition_line            Int
    definition_file            String
    definition_type            String?

    method   Method? @relation(fields: [methodId], references: [method_id])
    methodId Int?
}

model Method {
    method_id              Int                 @id @default(autoincrement())
    method_access          String
    method_args            Arg[]
    method_branches        Int
    method_col             Int
    method_definitions     Definition[]
    method_file            String
    method_line            Int
    method_lines           Int
    method_literals        Int
    method_loops           Int
    method_max_scope       Int
    method_type            String //  ex "Constructor_Trivial"
    method_name            String
    method_name_convention String?
    method_ret_type        String
    method_signature       String              @db.Text
    method_statements      Int
    method_template_args   MethodTemplateArg[]
    method_virtual         Boolean

    structure   Structure @relation(fields: [structureId], references: [structure_id])
    structureId Int
}

model MethodTemplateArg {
    method_template_arg_id Int    @id @default(autoincrement())
    method_template_arg    String

    method   Method @relation(fields: [methodId], references: [method_id])
    methodId Int
}

model Arg {
    arg_id              Int     @id @default(autoincrement())
    arg_col             Int
    arg_file            String
    arg_full_type       String
    arg_line            Int
    arg_name            String
    arg_name_convention String?
    arg_type            String?

    method   Method @relation(fields: [methodId], references: [method_id])
    methodId Int
}

// enum Access {
//     private
//     public
//     protected
// }
